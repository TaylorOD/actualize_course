/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var tinyColor = __webpack_require__(/*! tinycolor2 */ \"./node_modules/tinycolor2/tinycolor.js\");\n\nvar date = __webpack_require__(/*! date.js */ \"./node_modules/date.js/index.js\");\n\nconsole.log(\"Hello from JS!\");\nconsole.log(tinycolor.fromRatio);\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/date.js/index.js":
/*!***************************************!*\
  !*** ./node_modules/date.js/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Expose `Date`\n */\n\nmodule.exports = __webpack_require__(/*! ./lib/parser */ \"./node_modules/date.js/lib/parser.js\");\n\n\n//# sourceURL=webpack:///./node_modules/date.js/index.js?");

/***/ }),

/***/ "./node_modules/date.js/lib/date.js":
/*!******************************************!*\
  !*** ./node_modules/date.js/lib/date.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Module Dependencies\n */\n\nvar debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")('date:date')\n\n/**\n * Time constants\n */\n\nvar _second = 1000\nvar _minute = 60 * _second\nvar _hour = 60 * _minute\nvar _day = 24 * _hour\nvar _week = 7 * _day\nvar _year = 56 * _week\nvar _daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n/**\n * Expose `date`\n */\n\nmodule.exports = date\n\n/**\n * Initialize `date`\n *\n * @param {Date} offset (optional)\n * @return {Date}\n * @api publics\n */\n\nfunction date (offset) {\n  if (!(this instanceof date)) return new date(offset)\n  this._changed = {}\n  this.date = new Date(offset)\n}\n\n/**\n * Clone the current date\n */\n\ndate.prototype.clone = function () {\n  return new Date(this.date)\n}\n\n/**\n * Has changed\n *\n * @param {String} str\n * @return {Boolean}\n */\n\ndate.prototype.changed = function (str) {\n  if (this._changed[str] === undefined) return false\n  return this._changed[str]\n}\n\n/**\n * add or subtract seconds\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.second = function (n) {\n  var seconds = +n * _second\n  this.update(seconds)\n  this._changed['seconds'] = true\n  return this\n}\n\n/**\n * add or subtract minutes\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.minute = function (n) {\n  var minutes = +n * _minute\n  this.update(minutes)\n  this._changed['minutes'] = true\n  return this\n}\n\n/**\n * add or subtract hours\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.hour = function (n) {\n  var hours = +n * _hour\n  this.update(hours)\n  this._changed['hours'] = true\n  return this\n}\n\n/**\n * add or subtract days\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.day = function (n) {\n  var days = +n * _day\n  this.update(days)\n  this._changed['days'] = true\n  return this\n}\n\n/**\n * add or subtract weeks\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.week = function (n) {\n  var weeks = +n * _week\n  this.update(weeks)\n  this._changed['weeks'] = true\n  return this\n}\n\n/**\n * add or subtract months\n *\n * @param {Number} n\n * @return {Date}\n */\n\ndate.prototype.month = function (n) {\n  var d = this.date\n  var day = d.getDate()\n  d.setDate(1)\n  var month = +n + d.getMonth()\n  d.setMonth(month)\n\n  // Handle dates with less days\n  var dim = this.daysInMonth(month)\n  d.setDate(Math.min(dim, day))\n  return this\n}\n\n/**\n * get the days in the month\n */\n\ndate.prototype.daysInMonth = function (m) {\n  var dim = _daysInMonth[m]\n  var leap = leapyear(this.date.getFullYear())\n  return (1 == m && leap) ? 29 : 28\n}\n\n/**\n * add or subtract years\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.year = function (n) {\n  var yr = this.date.getFullYear()\n  yr += +n\n  this.date.setFullYear(yr)\n  this._changed['years'] = true\n  return this\n}\n\n/**\n * Set the time\n *\n * @param {String} h\n * @param {String} m\n * @param {String} s\n * @return {date}\n */\n\ndate.prototype.time = function (h, m, s, meridiem) {\n  if (h === false) {\n    h = this.date.getHours()\n  } else {\n    h = +h || 0\n    this._changed['hours'] = h\n  }\n\n  if (m === false) {\n    m = this.date.getMinutes()\n  } else {\n    m = +m || 0\n    this._changed['minutes'] = m\n  }\n\n  if (s === false) {\n    s = this.date.getSeconds()\n  } else {\n    s = +s || 0\n    this._changed['seconds'] = s\n  }\n\n  this.date.setHours(h, m, s)\n  return this\n}\n\n/**\n * Dynamically create day functions (sunday(n), monday(n), etc.)\n */\n\nvar days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']\ndays.forEach(function (day, i) {\n  date.prototype[days[i]] = function (n) {\n    this._changed['days'] = true\n    this.updateDay(i, n)\n  }\n})\n\n/**\n * go to day of week\n *\n * @param {Number} day\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.updateDay = function (d, n) {\n  n = +(n || 1)\n  var diff = (d - this.date.getDay() + 7) % 7\n  if (n > 0) --n\n  diff += (7 * n)\n  this.update(diff * _day)\n  return this\n}\n\n/**\n * Update the date\n *\n * @param {Number} ms\n * @return {Date}\n * @api private\n */\n\ndate.prototype.update = function (ms) {\n  this.date = new Date(this.date.getTime() + ms)\n  return this\n}\n\n/**\n * leap year\n *\n * @param {Number} yr\n * @return {Boolean}\n */\n\nfunction leapyear (yr) {\n  return (yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0\n}\n\n\n//# sourceURL=webpack:///./node_modules/date.js/lib/date.js?");

/***/ }),

/***/ "./node_modules/date.js/lib/maps.json":
/*!********************************************!*\
  !*** ./node_modules/date.js/lib/maps.json ***!
  \********************************************/
/*! exports provided: op, o, n, t, dt, T, f, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"op\\\":{\\\"plus\\\":[\\\"and\\\",\\\"plus\\\",\\\"+\\\",\\\"add\\\",\\\"on\\\"],\\\"minus\\\":[\\\"minus\\\",\\\"subtract\\\"],\\\"times\\\":[\\\"times\\\",\\\"multiply\\\"],\\\"divide\\\":[\\\"divide\\\"]},\\\"o\\\":{\\\"plus\\\":[\\\"at\\\",\\\"in\\\",\\\"past\\\",\\\"late\\\",\\\"later\\\",\\\"after\\\",\\\"next\\\",\\\"from\\\",\\\"start\\\",\\\"starting\\\",\\\"since\\\",\\\"coming\\\"],\\\"minus\\\":[\\\"last\\\",\\\"minus\\\",\\\"subtract\\\",\\\"ago\\\",\\\"before\\\",\\\"from\\\"]},\\\"n\\\":{\\\"0\\\":[\\\"zero\\\"],\\\"1\\\":[\\\"one\\\",\\\"a\\\",\\\"an\\\",\\\"first\\\"],\\\"2\\\":[\\\"two\\\",\\\"second\\\"],\\\"3\\\":[\\\"three\\\",\\\"third\\\"],\\\"4\\\":[\\\"four\\\",\\\"fourth\\\"],\\\"5\\\":[\\\"five\\\",\\\"fifth\\\"],\\\"6\\\":[\\\"six\\\",\\\"sixth\\\"],\\\"7\\\":[\\\"seven\\\",\\\"seventh\\\"],\\\"8\\\":[\\\"eight\\\",\\\"eighth\\\"],\\\"9\\\":[\\\"nine\\\",\\\"ninth\\\"],\\\"10\\\":[\\\"ten\\\",\\\"tenth\\\"],\\\"11\\\":[\\\"eleven\\\",\\\"eleventh\\\"],\\\"12\\\":[\\\"twelve\\\",\\\"twelveth\\\"],\\\"13\\\":[\\\"thirteen\\\",\\\"thirteenth\\\"],\\\"14\\\":[\\\"fourteen\\\",\\\"fourteenth\\\"],\\\"15\\\":[\\\"fifteen\\\",\\\"fifteenth\\\"],\\\"16\\\":[\\\"sixteen\\\",\\\"sixteenth\\\"],\\\"17\\\":[\\\"seventeen\\\",\\\"seventeenth\\\"],\\\"18\\\":[\\\"eighteen\\\",\\\"eighteenth\\\"],\\\"19\\\":[\\\"nineteen\\\",\\\"nineteenth\\\"],\\\"20\\\":[\\\"twenty\\\",\\\"twentieth\\\"],\\\"30\\\":[\\\"thirty\\\",\\\"thirtieth\\\"],\\\"40\\\":[\\\"fourty\\\",\\\"fourtieth\\\"],\\\"50\\\":[\\\"fifty\\\",\\\"fiftieth\\\"],\\\"60\\\":[\\\"sixty\\\",\\\"sixtieth\\\"],\\\"70\\\":[\\\"seventy\\\",\\\"seventieth\\\"],\\\"80\\\":[\\\"eighty\\\",\\\"eightieth\\\"],\\\"90\\\":[\\\"ninety\\\",\\\"ninetieth\\\"],\\\"100\\\":[\\\"hundred\\\",\\\"hundreds\\\",\\\"hundredth\\\"],\\\"1000\\\":[\\\"thousand\\\",\\\"thousands\\\",\\\"thousandth\\\",\\\"k\\\",\\\"K\\\"],\\\"0.25\\\":[\\\"quarter\\\"],\\\"0.5\\\":[\\\"half\\\",\\\"1/2\\\",\\\"half an\\\"]},\\\"t\\\":{},\\\"dt\\\":{\\\"s\\\":[\\\"second\\\",\\\"seconds\\\",\\\"s\\\",\\\"sec\\\",\\\"secs\\\"],\\\"m\\\":[\\\"minute\\\",\\\"minutes\\\",\\\"m\\\",\\\"min\\\",\\\"mins\\\"],\\\"h\\\":[\\\"hour\\\",\\\"hours\\\",\\\"h\\\",\\\"hr\\\",\\\"hrs\\\"],\\\"d\\\":[\\\"day\\\",\\\"days\\\",\\\"d\\\",\\\"dai\\\"],\\\"w\\\":[\\\"week\\\",\\\"weeks\\\",\\\"w\\\",\\\"wk\\\",\\\"wks\\\"],\\\"M\\\":[\\\"month\\\",\\\"months\\\",\\\"monthes\\\",\\\"M\\\",\\\"mo\\\",\\\"moon\\\",\\\"moons\\\"],\\\"y\\\":[\\\"year\\\",\\\"years\\\",\\\"y\\\",\\\"yr\\\",\\\"yrs\\\"]},\\\"T\\\":{\\\"t:,dt:=3h\\\":[\\\"later\\\",\\\"soon\\\"],\\\"t:=1d,dt:\\\":[\\\"st\\\",\\\"nd\\\",\\\"rd\\\",\\\"th\\\",\\\"st day\\\",\\\"nd day\\\",\\\"rd day\\\",\\\"th day\\\"],\\\"t:,dt:1w\\\":[\\\"st week\\\",\\\"nd week\\\",\\\"rd week\\\",\\\"th week\\\"],\\\"t:,dt:14d\\\":[\\\"day\\\",\\\"fortnight\\\"],\\\"t:=0h=0m=0s1mer,dt:\\\":[\\\"pm\\\",\\\"p.m\\\",\\\"p.m.\\\",\\\"noon\\\"],\\\"t:,dt:1d\\\":[\\\"tomorrow\\\",\\\"tmr\\\"],\\\"t:,dt:-1d\\\":[\\\"yesterday\\\",\\\"ytd\\\"],\\\"t:,0dt:\\\":[\\\"today\\\"],\\\"t:=2h=0m=0s1mer,dt:\\\":[\\\"afternoon\\\"],\\\"t:=6h=0m=0s0mer,dt:\\\":[\\\"dawn\\\"],\\\"t:=7h=0m=0s0mer,dt:\\\":[\\\"am\\\",\\\"a.m\\\",\\\"a.m.\\\"],\\\"t:=7h=0m=0s1mer,dt:\\\":[\\\"evening\\\"],\\\"t:=8h=0m=0s0mer,dt:\\\":[\\\"morning\\\"],\\\"t:=9h=0m=0s1mer,dt:\\\":[\\\"tonight\\\",\\\"night\\\"],\\\"t:=0h=0m=0s0mer,dt:1d\\\":[\\\"midnight\\\"],\\\"t:,dt:=0w0wd\\\":[\\\"sunday\\\",\\\"sun\\\"],\\\"t:,dt:=0w1wd\\\":[\\\"monday\\\",\\\"mon\\\"],\\\"t:,dt:=0w2wd\\\":[\\\"tuesday\\\",\\\"tue\\\",\\\"tues\\\"],\\\"t:,dt:=0w3wd\\\":[\\\"wednesday\\\",\\\"wed\\\"],\\\"t:,dt:=0w4wd\\\":[\\\"thursday\\\",\\\"thu\\\",\\\"thur\\\",\\\"thurs\\\"],\\\"t:,dt:=0w5wd\\\":[\\\"friday\\\",\\\"fri\\\"],\\\"t:,dt:=0w6wd\\\":[\\\"saturday\\\",\\\"sat\\\"],\\\"t:1M=1d,dt:\\\":[\\\"january\\\",\\\"jan\\\"],\\\"t:2M=1d,dt:\\\":[\\\"february\\\",\\\"feb\\\"],\\\"t:3M=1d,dt:\\\":[\\\"march\\\",\\\"mar\\\"],\\\"t:4M=1d,dt:\\\":[\\\"april\\\",\\\"apr\\\"],\\\"t:5M=1d,dt:\\\":[\\\"may\\\"],\\\"t:6M=1d,dt:\\\":[\\\"june\\\",\\\"jun\\\"],\\\"t:7M=1d,dt:\\\":[\\\"july\\\",\\\"jul\\\"],\\\"t:8M=1d,dt:\\\":[\\\"august\\\",\\\"aug\\\"],\\\"t:9M=1d,dt:\\\":[\\\"september\\\",\\\"sept\\\",\\\"sep\\\"],\\\"t:10M=1d,dt:\\\":[\\\"october\\\",\\\"oct\\\"],\\\"t:11M=1d,dt:\\\":[\\\"november\\\",\\\"nov\\\"],\\\"t:12M=1d,dt:\\\":[\\\"december\\\",\\\"dec\\\"],\\\"t:12M25d,dt:\\\":[\\\"christmas\\\"]},\\\"f\\\":{\\\"1\\\":[\\\"once\\\"],\\\"2\\\":[\\\"twice\\\"]}}\");\n\n//# sourceURL=webpack:///./node_modules/date.js/lib/maps.json?");

/***/ }),

/***/ "./node_modules/date.js/lib/norm.js":
/*!******************************************!*\
  !*** ./node_modules/date.js/lib/norm.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Production rule module for the CFG\n// !leap year\n// !proper carry considering # of days per month\n\n/**\n * Module Dependencies\n */\n\nvar _ = __webpack_require__(/*! ./subdash */ \"./node_modules/date.js/lib/subdash.js\")\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/date.js/lib/util.js\")\nvar symbol = __webpack_require__(/*! ./symbol */ \"./node_modules/date.js/lib/symbol.js\")\nvar tokenize = __webpack_require__(/*! ./tokenize */ \"./node_modules/date.js/lib/tokenize.js\")\n\n/**\n * Export `norm`\n */\n\nmodule.exports = norm\n\n// a partial implementation of norm\n/**\n * Preprocess a string using the human language for time CFG, return a triple of original str, preprocessed tokens, and the normal forms (extracted dates in normal forms)\n */\nfunction norm (str, offset) {\n  try {\n    // Production rules: CFG algorithm for human language for time\n    var tokObj = tokenize(str)\n    // console.log('p#0: parse normal forms', tokObj)\n    var syms = pickTokens(tokObj.symbols) || []\n    // console.log('p#0: remove nulls, pick tokens', syms)\n    syms = reduce(syms, ['n', 'n'])\n    // console.log('p#1: arithmetics: <n1>[<op>]<n2> ~ <n>, + if n1 > n2, * else', syms)\n    syms = nTnRedistribute(syms)\n    // console.log('p#2: redistribute, <n1><T1>[<op>]<n2><!T2> ~ <n1>[<op>]<n2> <T1>', syms)\n    syms = reduce(syms, ['o', 'o'])\n    // console.log('p#3: <o><o> ~ <o>*<o>', syms)\n\n    // preprocessing ends, now format output\n    var restored = restoreTokens(syms, tokObj)\n    return restored\n  } catch (e) {\n    return {\n      str: str,\n      tokens: [],\n      normals: []\n    }\n  }\n\n}\n\n/**\n * format a preprocessed array of symbols back into string, using some info from tokObj\n */\nfunction restoreTokens (syms, tokObj) {\n  var tokens = [],\n    normals = [],\n    tokensOut = tokObj.tokensOut,\n    tokensIn = tokObj.tokensIn\n\n  syms = util.removeTnPlus(syms)\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i],\n      sName = util.sName(s),\n      token = ''\n    switch (sName) {\n      case 'n':\n        // if token is already numeric, use it\n        token = (s.token.match(/^\\s*[\\d\\.\\-\\+]+\\s*$/)) ? s.token.trim() : s.value.toString()\n        break\n      case 'T':\n        // handles shits like 1 am ~ t:1h00m,dt:, am (token returned)\n        token = restoreNormal(s)\n        break\n      default:\n        // the other cases like op, o, cron, range\n        token = s.token.toString()\n    }\n\n    // extract the protected normal string\n    if (typeof token == 'string') {\n      tokens.push(token)\n    } else {\n      // get protected normal forms\n      normals.push(token.normal)\n    }\n  }\n  return {\n    tokens: tokens,\n    str: tokens.join(' ').replace(/\\s+/g, ' '),\n    normals: normals\n  }\n}\n\n/**\n * Given a T symbol, try to restore its normal form (return wrapped in JSON if it's a complete date string {normal: <normal string>}), or just return the plain string as token\n */\nfunction restoreNormal (T) {\n  var token = T.token\n  if (token.match(util.reT)) {\n    // if it is normal form, convert back into the normal1 or normal2 strings\n    var split = util.splitT(token)\n    if (_.includes(split, undefined)) {\n      // if it's normal2 form\n      // either it's a date or time\n      var dateArr = split.slice(0, 3),\n        timeArr = split.slice(3)\n      if (timeArr[0] != undefined) {\n        // check time first, it's first signature (hour) is defined\n        // return hh:mm\n        return util.TtoStdT(token).match(/(\\d+\\:\\d+)/)[1]\n      } else {\n        // else it's a date, parse arr and return complete stdT instead\n        // return wrapped in JSON if it's a complete date string\n        return { normal: util.TtoStdT(token) }\n      }\n    } else {\n      // if it's normal1 form, use TtoStd\n      // return wrapped in JSON if it's a complete date string\n      return { normal: util.TtoStdT(token) }\n    }\n  } else if (!util.has_t(T) && util.has_dt(T) && util.has_pureTimeUnit(T)) {\n    // handle pure dt: T that are purel displacement, e.g. week, fortnight\n    var dtStr = '',\n      units = _.keys(T.dt),\n      dt = T.dt\n    // accumulate dtStr\n    for (var i = 0; i < units.length; i++) {\n      var u = units[i],\n        kval = parseFloat(dt[u]),\n        // set number has default, or is 0, 1\n        numStr = (kval != dt[u] || kval == 0 || Math.abs(kval) == 1) ? '' : dt[u].toString() + ' '\n\n      // set canon from lemma only if it exists, and key is word, else use u\n      var canon = u\n      if (T.canon != undefined) {\n        // and if it's also a timeUnit\n        canon = T.canon\n      } else {\n        // get the lemma for u, its canon and key\n        var lemma = util.lemma(u),\n          lemmaCanon = lemma.canon,\n          lemmaKey = lemma.value\n        if (lemmaKey && lemmaKey.match(/^\\w+$/)) { canon = lemmaCanon }\n      }\n      // set the units, number, and canonical form of the unit\n      dtStr = dtStr + numStr + canon + ' '\n    }\n    return dtStr\n  } else {\n    // else it's just plain english, return\n    return token\n  }\n}\n// var fakes = { t: { h: '1', m: '00' }, dt: {}, token: 't:1h00m,dt:' }\n// var fakes = { t: { M: '12', d: '25', m: '00' }, dt: {}, token: 't:12M25d00m,dt:' }\n// console.log(restoreNormal(fakes))\n\n/**\n * !Backburner for future extension: Main method: Run the CFG algorithm to parse the string, return JSON of {input, output, diffStr}. Normalize the string before Matt's algorithm runs it.\n * @example\n * var str = 'having lunch today at 3 hours after 9am'\n * norm(str)\n * // => { input: 'having lunch today at 3 hours after 9am',\n *  output: '2016-03-04T05:00:09Z',\n *  difference: 'having lunch' }\n */\nfunction CFGproduce (str, offset) {\n  // try all the below till all is elegantly fixed\n  var diffStr = str,\n    finalStr = null,\n    output = str\n  // Production rules: CFG algorithm for human language for time\n  // p#0: tokenize, remove nulls, pick tokens\n  var tokObj = tokenize(str)\n  var syms = pickTokens(tokObj.symbols)\n  // console.log('p#0: parse normal forms, remove nulls, pick tokens', tokObj)\n\n  try {\n    syms = reduce(syms, ['n', 'n'])\n    // console.log('p#1: arithmetics: <n1>[<op>]<n2> ~ <n>, + if n1 > n2, * else', syms)\n    syms = nTnRedistribute(syms)\n    // console.log('p#2: redistribute, <n1><T1>[<op>]<n2><!T2> ~ <n1>[<op>]<n2> <T1>', syms)\n    output = util.tokenToStr(syms)\n\n    // !okay replace back the normal forms in the str\n\n    // // !Till future completion: Mute from below\n    // syms = reduce(syms, ['n', 'T'])\n    // // console.log('p#3: <n>[<op>]<T> ~ <T>, * if dt, + if t', syms)\n    // syms = reduce(syms, ['T', 'T'])\n    // // console.log('p#4: <T>[<op>]<T> ~ <T>', syms)\n    // syms = nDefTSyms(syms)\n    // // console.log('p#5: defaulter <o> <n> <o> ~ <o> <T> <o>, d defaults to t:h', syms)\n    // syms = reduce(syms, ['o', 'o'])\n    // // console.log('p#6: <o><o> ~ <o>*<o>', syms)\n    // syms = autoHourModding(syms)\n    // syms = weekModding(syms, offset)\n    // // console.log('p#7: modding: meridiem, weeks', syms)\n    // syms = optReduce(syms, ['T', 'T'], ['o'], null, symbol(util.nowT(offset)))\n    // // console.log('p#8: <T><o><T> ~ <T>', syms)\n\n    // // !future:\n    // // syms = reduce(syms, ['T'], ['r'])\n    // // syms = reduce(syms, ['f', 'T', 'rT'], ['c'])\n\n    // console.log('tokObj', tokObj)\n    syms = finalizeT(syms, offset)\n    // console.log('p#9: finalizeT with origin', syms)\n\n    finalStr = symsToStdT(syms, offset)\n    // console.log('finalStr', finalStr)\n\n  } catch (e) {}\n  // extract the tokens for difference string later\n  // diffStr = util.unparsedStr(tokObj.str, tokObj.symbols)\n  // console.log('diffStr', diffStr)\n  // !convert dt into proper terms\n\n  return {\n    input: str,\n    // output: new Date(finalStr),\n    output: output,\n    difference: diffStr\n  }\n\n}\n\n/**\n * Production rule #0: pick tokens, remove nulls.\n * 1. break into chunks of arrs delimited by triple-null-or-more\n * 2. reorder chunks by arr length\n * 3.1 init candidate = []\n * 3.2 pull and push the chunks not containing <T> into candidate\n * 3.3 pull and push the chunks containing <T> into candidate\n * 4. pick the last candidate\n */\nfunction pickTokens (syms) {\n  // 1. 2. 3.\n  var delimited = util.delimSyms(syms),\n    chunks = util.splitSyms(delimited, 'trinull'),\n    candidates = util.orderChunks(chunks)\n  // 4.\n  return candidates.pop()\n}\n\n/**\n * Reduce an array of symbols with binary operations between permissible symbols.\n * @param  {Array} syms   Array of input symbols\n * @param  {Array} varArr String names of permissible variables.\n * @param  {Array} opArr  String names of permissible operations.\n * @return {Array}        The reduced result.\n */\nfunction reduce (syms, varArr, opArr) {\n  if (syms.length < 2) {\n    return syms\n  }\n  // the operator arrays\n  var opArr = opArr || ['op']\n  // endmark for handling last symbol\n  syms.push('null')\n  // the result, past-pointer(previous non-null symbol), default-op, current-op, and whether current-op is inter-symbol op, i.e. will not be used up\n  var res = [],\n    past = null,\n    defOp = null,\n    op = defOp,\n    interOp = false\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i]\n    if (!past || !s) {\n      // edge case or null\n      if (i == 0) { past = s; }\n    } else if (util.isSym(s, opArr)) {\n      // s is an op. mark op as won't be used yet\n      op = s\n      interOp = true\n    // the nDefT for when past = 'n', s = 'o'\n    } else if (util.isSym(past, [varArr[0]]) && util.isSym(s, [varArr[1]])) {\n      // s and past are operable variables specified by varArr\n      past = execOp(past, op, s)\n      // reset after op is used\n      op = defOp\n      interOp = false\n    } else {\n      // no further legal operation made, push and continue\n      // change of class, past is finalized, push to res\n      res.push(past)\n      if (Array.isArray(past)) {\n        // if past was returned from execOp as array (not executed), then flatten it and dont push op to res, since it's already included in op\n        res = _.flatten(res)\n      } else {\n        // if inter-op (not used), push a clone (prevent overwrite later)\n        if (interOp) { res.push(symbol(op.value)) }\n      }\n      // reset\n      op = defOp\n      interOp = false\n      past = s\n    }\n  }\n  return res\n}\n\n/**\n * Optional reduce: similar to reduce() but either argument is optional.\n * algorithm: return a T\n * 1. for each t, dt, do:\n * 2. for each key in union of keys for Lt, Rt, do:\n * 3. _Rt = _Rt op _Lt\n * @param  {Array} syms   Array of input symbols\n * @param  {Array} varArr String names of permissible variables.\n * @param  {Array} opArr  String names of permissible operations.\n * @param  {symbol} Ldef   default for left argument\n * @param  {symbol} Rdef   default for right argument\n * @return {Array}        The reduced result.\n */\nfunction optReduce (syms, varArr, opArr, Ldef, Rdef) {\n  if (syms.length < 2) {\n    return syms\n  }\n  // use peek\n  var res = [],\n    sum = null,\n    L = null,\n    R = null\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i]\n    if (util.isSym(s, opArr)) {\n      if (sum == null) {\n        L = syms[i - 1]\n        sum = (util.isSym(L, [varArr[0]])) ? L : Ldef\n      }\n      R = syms[i + 1]\n      // if is var skip it since will be consumed\n      if (util.isSym(R, [varArr[1]])) { i++; }\n      // else reset to default\n      else { R = Rdef; }\n      // compute:\n      sum = execOp(sum, s, R)\n      // before loop quits due to possible i++, push the last\n      if (i == syms.length - 1) {\n        res.push(sum)\n      }\n    } else {\n      // s is not opArr, can't have been varArr either\n      // edge case: at first dont push\n      if (i > 0) {\n        res.push(sum)\n        res.push(s)\n        sum = null\n      }\n    }\n  }\n  return res\n}\n\n/**\n * Execute non-commutative operation between 2 argument symbols and an op symbol; carry out respective ops according to symbol names.\n * @param  {symbol} L  Left argument\n * @param  {symbol} op operation\n * @param  {symbol} R  Right argument\n * @param  {str} offset The time origin offset\n * @return {symbol}    Result\n */\nfunction execOp (L, op, R, offset) {\n  var otype = util.opType(L, op, R),\n    res = null\n  if (_.includes(['nn'], otype)) {\n    res = nnOp(L, op, R)\n  } else if (_.includes(['nT'], otype)) {\n    res = nTOp(L, op, R)\n  } else if (_.includes(['TT'], otype)) {\n    res = TTOp(L, op, R)\n  } else if (_.includes(['ToT', 'oT', 'To'], otype)) {\n    res = ToTOp(L, op, R, offset)\n  } else if (_.includes(['oo'], otype)) {\n    res = ooOp(L, R)\n  } else if (_.includes(['rT', 'TrT'], otype)) {\n    // has optional arg\n    res = rTOp(L, R)\n  } else if (_.includes(['cT', 'fcT', 'crT', 'fcrT'], otype)) {\n    // has optional arg\n    res = cTOp(L, R)\n  } else {\n    // not executable, e.g. not in the right order, return fully\n    res = (op == null) ? [L, R] : [L, op, R]\n  }\n  return res\n}\n\n/**\n * Atomic binary arithmetic operation on the numerical level, with default overriding the argument prepended with '='.\n * @param  {string|Number} Lval The left argument value.\n * @param  {symbol} op   The op symbol\n * @param  {string|Number} Rval The right argument value.\n * @return {Number}      Result from the operation.\n */\nfunction atomicOp (Lval, op, Rval, dontOp) {\n  dontOp = dontOp || false\n  var oName = op.value\n  if (Lval == undefined) {\n    // if L is missing, R must exist tho\n    return (oName == 'minus') ? Rval.toString().replace(/(\\d)/, '-$1') : Rval\n  } else if (Rval == undefined) {\n    // if L exists, be it def or not, R missing\n    return Lval\n  } else {\n    // or R exist or is default (parse to NaN), L can be default too but ignore then\n    var defL = Lval.toString().match(/^=/),\n      defR = Rval.toString().match(/^=/)\n    var l = parseFloat(Lval.toString().replace(/^=/, '')),\n      r = parseFloat(Rval.toString().replace(/^=/, ''))\n    if (defL && defR) {\n      // if both are default, return r 'last come last serve'\n      return r\n    } else if (defL && !defR) {\n      // if either default, return the non-default\n      return r\n    } else if (!defL && defR) {\n      return l\n    } else {\n      // none default\n      if (dontOp) {\n        // if is a don't operate together, i.e. for t, just return l\n        // 'first come first serve'\n        return l\n      } else {\n        // make the into proper floats first\n        if (oName == 'minus') {\n          return l - r\n        } else if (oName == 'plus') {\n          return l + r\n        } else if (oName == 'times') {\n          return l * r\n        } else if (oName == 'divide') {\n          return l / r\n        }\n      }\n    }\n  }\n}\n\n/**\n * p#1: arithmetics: <n1>[<op>]<n2> ~ <n>, + if n1 > n2, * else\n */\nfunction nnOp (L, op, R) {\n  var l = L.value,\n    r = R.value\n  // set the default op according to value in nn op\n  if (l > r) {\n    op = op || symbol('plus')\n  } else {\n    op = op || symbol('times')\n  }\n  var res = atomicOp(l, op, r)\n  return symbol(res)\n}\n\n/**\n * p#2: redistribute, <n1><T1>[<op>]<n2><!T2> ~ <n1>[<op>]<n2> <T1>\n * algorithm: note that from previous steps no <n>'s can occur adjacently\n * 1. scan array L to R, on each <n> found:\n * 2.1 if its R is <T>, continue\n * 2.2 else, this is the target. do:\n * 3.1 init carry = []. remove and push <n> into carry,\n * 3.2 if its L is <op>, remove and prepend <op> into carry,\n * 4.1 find the first <n> to the left, if not <n>, drop the carry and continue\n * 4.2 else merge the carry after the <n>\n * 5. At the end of loop, rerun production rule #1\n */\nfunction nTnRedistribute (syms) {\n  if (syms.length < 2) {\n    return syms\n  }\n  // 1.\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i]\n    if (util.sName(s) != 'n') {\n      continue\n    }\n    // 1.\n\n    var R = syms[i + 1]\n    if (util.sName(R) == 'T') {\n      continue\n    }\n    // 2.2\n\n    // 3.1 prepare the carry\n    var carry = []\n    // 3.2 the Left symbol\n    var L = syms[i - 1],\n      Li = -1\n    if (util.sName(L) == 'op') {\n      // if L is an 'op', remember to pull it later\n      Li = i - 1\n    }\n    // 4.1\n    // find L...L of L that is 'n'\n    var LLi = _.findLastIndex(syms.slice(0, i - 1), function (Ls) {\n      return util.sName(Ls) == 'n'\n    })\n    if (!syms[LLi] || util.sName(syms[LLi + 1]) != 'T') {\n      // if can't find 'n' (index = -1), or the R of 'n' isn't T, abort mission\n      // syms.splice(i, 0, carry)\n    } else {\n      // 4.2\n      // else, pull s at [i], optional L at [Li], and push at LLi+1\n      carry.push(_.pullAt(syms, i)[0])\n      if (Li != -1) {\n        carry.unshift(_.pullAt(syms, Li)[0])\n      }\n      syms.splice(LLi + 1, 0, carry)\n      syms = _.flatten(syms)\n    }\n  }\n\n  // 5. redo the <n><n> op\n  syms = reduce(syms, ['n', 'n'])\n  return syms\n}\n\n/**\n * p#3: <n>[<op>]<T> ~ <T>, * if dt, + if t\n * 1. if t can be overidden, start from the highest unit set to n, then return.\n * 2. otherwise, if <dt> not empty, <n><dt> = <n>*<dt>, then return\n * 3. else, if <t> not empty, <n><t> = <n>+<t>, then return\n */\nfunction nTOp (nL, op, TR) {\n  var tOverrideUnit = util.highestOverride(TR.t)\n  if (tOverrideUnit) {\n    // 1.\n    TR.t[tOverrideUnit] = nL.value\n  } else if (_.keys(TR.dt).length) {\n    // 2.\n    op = op || symbol('times')\n    for (var k in TR.dt) {\n      if (k == 'wd') {\n        continue\n      }\n      TR.dt[k] = atomicOp(nL.value, op, TR.dt[k])\n    }\n  } else if (_.keys(TR.t).length) {\n    // 3.\n    op = op || symbol('plus')\n    for (var k in TR.t) {\n      TR.t[k] = atomicOp(nL.value, op, TR.t[k])\n    }\n  }\n  return TR\n}\n\n/**\n * p#4: <T>[<op>]<T> ~ <T>\n */\nfunction TTOp (TL, op, TR) {\n  // set the default op\n  op = op || symbol('plus')\n  // util.sName\n  // mutate into TL\n  for (var k in TR.t) {\n    // okay done add absolute time, just as you don't add origins together put u take gradual specificity, the 'true' param for dontOp if exist, return r\n    // override default tho, taken care of by atomic\n    TL.t[k] = atomicOp(TL.t[k], op, TR.t[k], true)\n  }\n  for (var k in TR.dt) {\n    if (k == 'wd') {\n      continue\n    }\n    TL.dt[k] = atomicOp(TL.dt[k], op, TR.dt[k])\n  }\n  return TL\n}\n\n/**\n * p#5: defaulter <o> <n> <o> ~ <o> <T> <o>, d defaults to t:h\n */\nfunction nDefTSyms (syms) {\n  var res = []\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i]\n    res.push(util.isSym(s, ['n']) ? nDefT(s) : s)\n  }\n  return res\n}\n\n/**\n * Helper: default a singlet n to T, i.e. next available hour\n */\nfunction nDefT (n) {\n  var deft = symbol('t:1h,dt:')\n  var nVal = n.value\n  var currentHour = new Date().getHours()\n  var nextnVal = Math.floor(currentHour / 12) * 12 + nVal\n  var tHour = execOp(symbol(nextnVal), symbol('times'), deft)\n  return tHour\n}\n\n/**\n * <o><o> ~ <o>*<o>\n * To handle 'before next' etc.\n */\nfunction ooOp (L, R) {\n  var Lsign = (L.value == 'plus') ? +1 : -1,\n    Rsign = (R.value == 'plus') ? +1 : -1,\n    LRsign = Lsign * Rsign\n  return (LRsign > 0) ? symbol('after') : symbol('before')\n}\n\n/**\n * Next available T', given an offset, by incrementing in dt the next unit ++1 from the current largest unit in t.\n */\nfunction nextAvailable (T, offset) {\n  // find the current largest and next largest unit\n  var nextUnit = util.nextLargestUnit(T)\n\n  // first finalized T\n  var finT1 = finalizeT([T], offset)[0],\n    stdStr1 = util.TtoStdT(finT1),\n    UTC1 = Date.parse(stdStr1),\n    UTCnow = Date.parse(new Date()),\n    UTCdiff = UTC1 - UTCnow\n  // if UTC1 is not in the future, add next unit\n  if (UTCdiff < 0) {\n    T.dt[nextUnit] = (T.dt[nextUnit] || 0) + 1\n    var finT2 = finalizeT([T], offset)[0]\n    return finT2\n  } else {\n    return finT1\n  }\n}\n\n/**\n * p#6: <T><o><T> ~ <T>\n */\nfunction ToTOp (L, op, R, offset) {\n  if (L && !R) {\n    // if R is missing, set to now\n    R = symbol(util.nowT(offset))\n  } else if (!L && R) {\n    // if L missing\n    if (util.has_t(R)) {\n      // if R has t => part of origin, so L shd be the according dt\n      var nextUnit = util.nextLargestUnit(R)\n      R = nextAvailable(R, offset)\n      // so arbitrarily set as 0.5 * next largest unit\n      L = execOp(symbol(0.5), symbol('times'), symbol(nextUnit))\n    } else {\n      // R has dt only, make L an origin then\n      L = symbol(util.nowT(offset))\n    }\n  } else if (!L && !R) {\n    L = symbol(util.nowT(offset))\n    R = symbol(util.nowT(offset))\n  }\n\n  var Ttype = ['t', 'dt']\n  for (var i = 0; i < Ttype.length; i++) {\n    var _Ttype = Ttype[i],\n      // the dontOp for 't'\n      dontOp = (_Ttype == 't')\n    var concatKeys = _.keys(L[_Ttype]).concat(_.keys(R[_Ttype]))\n    var keys = _.unique(concatKeys)\n    for (var j = 0; j < keys.length; j++) {\n      var k = keys[j]\n      // run atomic op, note the reversed order of R op L\n      R[_Ttype][k] = atomicOp(R[_Ttype][k], op, L[_Ttype][k], dontOp)\n    }\n  }\n  return R\n}\n\n/**\n * p#7: auto-hour-modding: t:h mod 12\n * then add the meridiem to t:h if exist\n */\nfunction autoHourModding (syms) {\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i]\n    if (util.isSym(s, ['T'])) {\n      if (syms[i]['t']['h']) {\n        // if t has 'h', mod it\n        var value = syms[i]['t']['h'].toString()\n        var isDefault = (value.match(/^=/) || [])[0] || ''\n        value = parseFloat(value.replace(/^=/, ''))\n        value = value > 12 ? value % 12 : value\n        syms[i]['t']['h'] = isDefault + value\n      }\n      // apply the non-0 meridiem after modding:\n      if (syms[i]['t']['mer']) {\n        var dt_h = (syms[i]['dt']['h'] || '0').toString()\n        // dump default at last\n        dt_h = dt_h.replace(/^=/, '')\n        if (syms[i]['t']['mer'] == 1) {\n          syms[i]['dt']['h'] = parseFloat(dt_h) + 12\n        }\n        // delete mer\n        delete syms[i]['t']['mer']\n      }\n    }\n  }\n  return syms\n}\n\n// do it at last, to use like '2nd week of march'\nfunction weekModding (syms, offset) {\n  // weekday of the offset to calculate dt:d\n  var offsetWD = new Date(util.TtoStdT(util.nowT())).getDay()\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i]\n    if (util.isSym(s, ['T'])) {\n      if (syms[i]['dt']['wd']) {\n        // if dt has 'wd', mod it and turn into dt:d + %wd\n        var WD = parseInt(syms[i]['dt']['wd'])\n        var diffWD = (WD - offsetWD) % 7\n        if (diffWD < 0) { diffWD = diffWD + 7 }\n        syms[i]['dt']['d'] = (syms[i]['dt']['d'] || 0) + diffWD\n        delete syms[i]['dt']['wd']\n      }\n    }\n  }\n  return syms\n}\n\n/**\n * p#8: Finalize each T in syms array:\n * 1. remove defaults from T\n * 2. add origin symbol.nowT() with given T.t, override missing units\n * 3. add t and dt\n */\nfunction finalizeT (syms, offset) {\n  // remove defaults\n  for (var i = 0; i < syms.length; i++) {\n    syms[i] = removeDefaults(syms[i])\n  }\n  // default with origin at end\n  syms.push(symbol(util.nowT(offset)))\n  syms = reduce(syms, ['T', 'T'])\n  // combine t and dt\n  var newSyms = []\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i],\n      sum = tdtAdd(s)\n    sum.token = util.TtoStr(sum)\n    newSyms.push(tdtAdd(s))\n  }\n  return syms\n}\n\n/**\n * remove the defaults before adding with origin\n */\nfunction removeDefaults (T) {\n  for (var k in T.dt) {\n    T.dt[k] = T.dt[k].toString().replace(/^=/, '')\n  }\n  for (var k in T.t) {\n    T.t[k] = T.t[k].toString().replace(/^=/, '')\n  }\n  // delete meridiem too\n  delete T['t']['mer']\n\n  return T\n}\n\n/**\n * add t and dt within a T together, delete the dt keys\n */\nfunction tdtAdd (T) {\n  // guard for non-T\n  if (!util.isSym(T, ['T'])) {\n    return T\n  }\n  for (var k in T.dt) {\n    // absolute add, disregard defaults\n    var t_k = (T.t[k] == undefined) ? 0 : T.t[k],\n      dt_k = T.dt[k]\n    // cleanup the default\n    t_k = t_k.toString().replace(/^=/, '')\n    dt_k = dt_k.toString().replace(/^=/, '')\n    var sum = parseFloat(t_k) + parseFloat(dt_k)\n    // set the result, remove used dt\n    T.t[k] = sum\n    delete T.dt[k]\n  }\n  return T\n}\n\n/**\n * p#9: Convert an array of symbols to normalized stdT strings.\n * if token was normal form already, parse into stdT.\n * if is n: return n.value\n * else return org token\n */\nfunction symsToStdT (syms, offset) {\n  var tokens = []\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i],\n      token = s.token.toString()\n    // default, don't switch unless:\n    if (util.isSym(s, ['n'])) {\n      token = s.value\n    } else if (token.match(util.reT)) {\n      // is normal T form\n      token = util.TtoStdT(token, offset)\n    }\n    tokens.push(token)\n  }\n  return tokens.join(' ')\n}\n\n/**\n * !to be implemented for range\n */\nfunction rTOp (L, R) {\n  var start, end\n  if (!R) {\n    start = symbol(util.nowT())\n    end = L\n  } else {\n    start = L\n    end = R\n  }\n  return symbol({ start: start, end: end })\n}\n\n/**\n * !to be implemented for cron\n */\nfunction cTOp (L, R) {}\n\n\n//# sourceURL=webpack:///./node_modules/date.js/lib/norm.js?");

/***/ }),

/***/ "./node_modules/date.js/lib/parser.js":
/*!********************************************!*\
  !*** ./node_modules/date.js/lib/parser.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Module Dependencies\n */\n\nvar debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")('date:parser')\nvar date = __webpack_require__(/*! ./date */ \"./node_modules/date.js/lib/date.js\")\nvar norm = __webpack_require__(/*! ./norm */ \"./node_modules/date.js/lib/norm.js\")\n\n/**\n * Days\n */\n\nvar days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']\nvar months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september',\n  'october', 'november', 'december'\n]\n\n/**\n * Regexs\n */\n\n// 5, 05, 5:30, 5.30, 05:30:10, 05:30.10, 05.30.10, at 5\nvar rMeridiem = /^(\\d{1,2})([:.](\\d{1,2}))?([:.](\\d{1,2}))?\\s*([ap]m)/\nvar rHourMinute = /^(\\d{1,2})([:.](\\d{1,2}))([:.](\\d{1,2}))?/\nvar rAtHour = /^at\\s?(\\d{1,2})$/\nvar rDays = /\\b(sun(day)?|mon(day)?|tues(day)?|wed(nesday)?|thur(sday|s)?|fri(day)?|sat(urday)?)s?\\b/\nvar rMonths = /^((\\d{1,2})\\s*(st|nd|rd|th))\\s(day\\s)?(of\\s)?(january|february|march|april|may|june|july|august|september|october|november|december)/i\nvar rPast = /\\b(last|yesterday|ago)\\b/\nvar rDayMod = /\\b(morning|noon|afternoon|night|evening|midnight)\\b/\nvar rAgo = /^(\\d*)\\s?\\b(second|minute|hour|day|week|month|year)[s]?\\b\\s?ago$/\n\n/**\n * Expose `parser`\n */\n\nmodule.exports = parser\n\n/**\n * Initialize `parser`\n *\n * @param {String} str\n * @return {Date}\n * @api publics\n */\n\nfunction parser (str, offset) {\n  if (!(this instanceof parser)) return new parser(str, offset)\n  if (typeof offset == 'string') offset = parser(offset)\n\n  // CFG preprocessing into normalized format,\n  // get {str, tokens, normals}\n  // !future: return multiple parsed times, some from it\n  var prepro = norm(str, offset)\n  // console.log(prepro)\n  // reset the str to prepro str\n  str = prepro.str\n  // if proprocessed doesn't leave any str to be processed (non-date-time) format, check normals\n  if (!str) {\n    if (prepro.normals.length) {\n      // if there's normal date parsed already,\n      // !return the first\n      return new Date(prepro.normals[0])\n    } else {\n      // otherwise go back to below to return proper Error\n      str = str\n    }\n  }\n\n  var d = offset || new Date\n  this.date = new date(d)\n  this.original = str\n  this.str = str.toLowerCase()\n  this.stash = []\n  this.tokens = []\n  while (this.advance() !== 'eos')\n  debug('tokens %j', this.tokens)\n  this.nextTime(d)\n  if (this.date.date == d) throw new Error('Invalid date')\n  return this.date.date\n}\n\n/**\n * Advance a token\n */\n\nparser.prototype.advance = function () {\n  var tok = this.eos()\n    || this.space()\n    || this._next()\n    || this.last()\n    || this.dayByName()\n    || this.monthByName()\n    || this.timeAgo()\n    || this.ago()\n    || this.yesterday()\n    || this.tomorrow()\n    || this.noon()\n    || this.midnight()\n    || this.night()\n    || this.evening()\n    || this.afternoon()\n    || this.morning()\n    || this.tonight()\n    || this.meridiem()\n    || this.hourminute()\n    || this.athour()\n    || this.week()\n    || this.month()\n    || this.year()\n    || this.second()\n    || this.minute()\n    || this.hour()\n    || this.day()\n    || this.number()\n    || this.string()\n    || this.other()\n\n  this.tokens.push(tok)\n  return tok\n}\n\n/**\n * Lookahead `n` tokens.\n *\n * @param {Number} n\n * @return {Object}\n * @api private\n */\n\nparser.prototype.lookahead = function (n) {\n  var fetch = n - this.stash.length\n  if (fetch == 0) return this.lookahead(++n)\n  while (fetch-- > 0) this.stash.push(this.advance())\n  return this.stash[--n]\n}\n\n/**\n * Lookahead a single token.\n *\n * @return {Token}\n * @api private\n */\n\nparser.prototype.peek = function () {\n  return this.lookahead(1)\n}\n\n/**\n * Fetch next token including those stashed by peek.\n *\n * @return {Token}\n * @api private\n */\n\nparser.prototype.next = function () {\n  var tok = this.stashed() || this.advance()\n  return tok\n}\n\n/**\n * Return the next possibly stashed token.\n *\n * @return {Token}\n * @api private\n */\n\nparser.prototype.stashed = function () {\n  var stashed = this.stash.shift()\n  return stashed\n}\n\n/**\n * Consume the given `len`.\n *\n * @param {Number|Array} len\n * @api private\n */\n\nparser.prototype.skip = function (len) {\n  this.str = this.str.substr(Array.isArray(len) ? len[0].length : len)\n}\n\n/**\n * EOS\n */\n\nparser.prototype.eos = function () {\n  if (this.str.length) return\n  return 'eos'\n}\n\n/**\n * Space\n */\n\nparser.prototype.space = function () {\n  var captures\n  if (captures = /^([ \\t]+)/.exec(this.str)) {\n    this.skip(captures)\n    return this.advance()\n  }\n}\n\n/**\n * Second\n */\n\nparser.prototype.second = function () {\n  var captures\n  if (captures = /^s(ec|econd)?s?/.exec(this.str)) {\n    this.skip(captures)\n    return 'second'\n  }\n}\n\n/**\n * Minute\n */\n\nparser.prototype.minute = function () {\n  var captures\n  if (captures = /^m(in|inute)?s?/.exec(this.str)) {\n    this.skip(captures)\n    return 'minute'\n  }\n}\n\n/**\n * Hour\n */\n\nparser.prototype.hour = function () {\n  var captures\n  if (captures = /^h(r|our)s?/.exec(this.str)) {\n    this.skip(captures)\n    return 'hour'\n  }\n}\n\n/**\n * Day\n */\n\nparser.prototype.day = function () {\n  var captures\n  if (captures = /^d(ay)?s?/.exec(this.str)) {\n    this.skip(captures)\n    return 'day'\n  }\n}\n\n/**\n * Day by name\n */\n\nparser.prototype.dayByName = function () {\n  var captures\n  var r = new RegExp('^' + rDays.source)\n  if (captures = r.exec(this.str)) {\n    var day = captures[1]\n    this.skip(captures)\n    this.date[day](1)\n    return captures[1]\n  }\n}\n\n/**\n * Month by name\n */\n\nparser.prototype.monthByName = function () {\n  var captures\n  if (captures = rMonths.exec(this.str)) {\n    var day = captures[2]\n    var month = captures[6]\n    this.date.date.setMonth((months.indexOf(month)))\n    if (day) this.date.date.setDate(parseInt(day))\n    this.skip(captures)\n    return captures[0]\n  }\n}\n\nparser.prototype.timeAgo = function () {\n  var captures\n  if (captures = rAgo.exec(this.str)) {\n    var num = captures[1]\n    var mod = captures[2]\n    this.date[mod](-num)\n    this.skip(captures)\n    return 'timeAgo'\n  }\n}\n\n/**\n * Week\n */\n\nparser.prototype.week = function () {\n  var captures\n  if (captures = /^w(k|eek)s?/.exec(this.str)) {\n    this.skip(captures)\n    return 'week'\n  }\n}\n\n/**\n * Month\n */\n\nparser.prototype.month = function () {\n  var captures\n  if (captures = /^mon(th)?(es|s)?\\b/.exec(this.str)) {\n    this.skip(captures)\n    return 'month'\n  }\n\n}\n\n/**\n * Week\n */\n\nparser.prototype.year = function () {\n  var captures\n  if (captures = /^y(r|ear)s?/.exec(this.str)) {\n    this.skip(captures)\n    return 'year'\n  }\n}\n\n/**\n * Meridiem am/pm\n */\n\nparser.prototype.meridiem = function () {\n  var captures\n  if (captures = rMeridiem.exec(this.str)) {\n    this.skip(captures)\n    this.time(captures[1], captures[3], captures[5], captures[6])\n    return 'meridiem'\n  }\n}\n\n/**\n * Hour Minute (ex. 12:30)\n */\n\nparser.prototype.hourminute = function () {\n  var captures\n  if (captures = rHourMinute.exec(this.str)) {\n    this.skip(captures)\n    this.time(captures[1], captures[3], captures[5], this._meridiem)\n    return 'hourminute'\n  }\n}\n\n/**\n * At Hour (ex. at 5)\n */\n\nparser.prototype.athour = function () {\n  var captures\n  if (captures = rAtHour.exec(this.str)) {\n    this.skip(captures)\n    this.time(captures[1], 0, 0, this._meridiem)\n    this._meridiem = null\n    return 'athour'\n  }\n}\n\n/**\n * Time set helper\n */\n\nparser.prototype.time = function (h, m, s, meridiem) {\n  var d = this.date\n  var before = d.clone()\n\n  if (meridiem) {\n    // convert to 24 hour\n    h = ('pm' == meridiem && 12 > h) ? +h + 12 : h; // 6pm => 18\n    h = ('am' == meridiem && 12 == h) ? 0 : h; // 12am => 0\n  }\n\n  m = (!m && d.changed('minutes')) ? false : m\n  s = (!s && d.changed('seconds')) ? false : s\n  d.time(h, m, s)\n}\n\n/**\n * Best attempt to pick the next time this date will occur\n *\n * TODO: place at the end of the parsing\n */\n\nparser.prototype.nextTime = function (before) {\n  var d = this.date\n  var orig = this.original\n\n  if (before <= d.date || rPast.test(orig)) return this\n\n  // If time is in the past, we need to guess at the next time\n  if (rDays.test(orig)) {\n    d.day(7)\n  } else if ((before - d.date) / 1000 > 60) {\n    // If it is a month in the past, don't add a day\n    if (rMonths.test(orig)) {\n      d.day(0)\n    } else {\n      d.day(1)\n    }\n  }\n\n  return this\n}\n\n/**\n * Yesterday\n */\n\nparser.prototype.yesterday = function () {\n  var captures\n  if (captures = /^(yes(terday)?)/.exec(this.str)) {\n    this.skip(captures)\n    this.date.day(-1)\n    return 'yesterday'\n  }\n}\n\n/**\n * Tomorrow\n */\n\nparser.prototype.tomorrow = function () {\n  var captures\n  if (captures = /^tom(orrow)?/.exec(this.str)) {\n    this.skip(captures)\n    this.date.day(1)\n    return 'tomorrow'\n  }\n}\n\n/**\n * Noon\n */\n\nparser.prototype.noon = function () {\n  var captures\n  if (captures = /^noon\\b/.exec(this.str)) {\n    this.skip(captures)\n    var before = this.date.clone()\n    this.date.date.setHours(12, 0, 0)\n    return 'noon'\n  }\n}\n\n/**\n * Midnight\n */\n\nparser.prototype.midnight = function () {\n  var captures\n  if (captures = /^midnight\\b/.exec(this.str)) {\n    this.skip(captures)\n    var before = this.date.clone()\n    this.date.date.setHours(0, 0, 0)\n    return 'midnight'\n  }\n}\n\n/**\n * Night (arbitrarily set at 7pm)\n */\n\nparser.prototype.night = function () {\n  var captures\n  if (captures = /^night\\b/.exec(this.str)) {\n    this.skip(captures)\n    this._meridiem = 'pm'\n    var before = this.date.clone()\n    this.date.date.setHours(19, 0, 0)\n    return 'night'\n  }\n}\n\n/**\n * Evening (arbitrarily set at 5pm)\n */\n\nparser.prototype.evening = function () {\n  var captures\n  if (captures = /^evening\\b/.exec(this.str)) {\n    this.skip(captures)\n    this._meridiem = 'pm'\n    var before = this.date.clone()\n    this.date.date.setHours(17, 0, 0)\n    return 'evening'\n  }\n}\n\n/**\n * Afternoon (arbitrarily set at 2pm)\n */\n\nparser.prototype.afternoon = function () {\n  var captures\n  if (captures = /^afternoon\\b/.exec(this.str)) {\n    this.skip(captures)\n    this._meridiem = 'pm'\n    var before = this.date.clone()\n\n    if (this.date.changed('hours')) return 'afternoon'\n\n    this.date.date.setHours(14, 0, 0)\n    return 'afternoon'\n  }\n}\n\n/**\n * Morning (arbitrarily set at 8am)\n */\n\nparser.prototype.morning = function () {\n  var captures\n  if (captures = /^morning\\b/.exec(this.str)) {\n    this.skip(captures)\n    this._meridiem = 'am'\n    var before = this.date.clone()\n    if (!this.date.changed('hours')) this.date.date.setHours(8, 0, 0)\n    return 'morning'\n  }\n}\n\n/**\n * Tonight\n */\n\nparser.prototype.tonight = function () {\n  var captures\n  if (captures = /^tonight\\b/.exec(this.str)) {\n    this.skip(captures)\n    this._meridiem = 'pm'\n    return 'tonight'\n  }\n}\n\n/**\n * Next time\n */\n\nparser.prototype._next = function () {\n  var captures\n  if (captures = /^next/.exec(this.str)) {\n    this.skip(captures)\n    var d = new Date(this.date.date)\n    var mod = this.peek()\n\n    // If we have a defined modifier, then update\n    if (this.date[mod]) {\n      this.next()\n      // slight hack to modify already modified\n      this.date = date(d)\n      this.date[mod](1)\n    } else if (rDayMod.test(mod)) {\n      this.date.day(1)\n    }\n\n    return 'next'\n  }\n}\n\n/**\n * Last time\n */\n\nparser.prototype.last = function () {\n  var captures\n  if (captures = /^last/.exec(this.str)) {\n    this.skip(captures)\n    var d = new Date(this.date.date)\n    var mod = this.peek()\n\n    // If we have a defined modifier, then update\n    if (this.date[mod]) {\n      this.next()\n      // slight hack to modify already modified\n      this.date = date(d)\n      this.date[mod](-1)\n    } else if (rDayMod.test(mod)) {\n      this.date.day(-1)\n    }\n\n    return 'last'\n  }\n}\n\n/**\n * Ago\n */\n\nparser.prototype.ago = function () {\n  var captures\n  if (captures = /^ago\\b/.exec(this.str)) {\n    this.skip(captures)\n    return 'ago'\n  }\n}\n\n/**\n * Number\n */\n\nparser.prototype.number = function () {\n  var captures\n  if (captures = /^(\\d+)/.exec(this.str)) {\n    var n = captures[1]\n    this.skip(captures)\n    var mod = this.peek()\n\n    // If we have a defined modifier, then update\n    if (this.date[mod]) {\n      if ('ago' == this.peek()) n = -n\n      this.date[mod](n)\n    } else if (this._meridiem) {\n      // when we don't have meridiem, possibly use context to guess\n      this.time(n, 0, 0, this._meridiem)\n      this._meridiem = null\n    } else if (this.original.indexOf('at') > -1) {\n      this.time(n, 0, 0, this._meridiem)\n      this._meridiem = null\n    }\n\n    return 'number'\n  }\n}\n\n/**\n * String\n */\n\nparser.prototype.string = function () {\n  var captures\n  if (captures = /^\\w+/.exec(this.str)) {\n    this.skip(captures)\n    return 'string'\n  }\n}\n\n/**\n * Other\n */\n\nparser.prototype.other = function () {\n  var captures\n  if (captures = /^./.exec(this.str)) {\n    this.skip(captures)\n    return 'other'\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/date.js/lib/parser.js?");

/***/ }),

/***/ "./node_modules/date.js/lib/subdash.js":
/*!*********************************************!*\
  !*** ./node_modules/date.js/lib/subdash.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Substitutes for lodash methods\n */\n\nexports.difference = function (bigArr, smallArr) {\n  var diff = []\n  for (var i = 0; i < bigArr.length; i++) {\n    var ele = bigArr[i]\n    if (smallArr.indexOf(ele) == -1) {\n      diff.push(ele)\n    }\n  }\n  return diff\n}\n\nexports.flatten = function (arr) {\n  return [].concat.apply([], arr)\n}\n\nexports.find = function (arr, fn) {\n  var found = null\n  for (var i = 0; i < arr.length; i++) {\n    if (fn(arr[i])) {\n      found = arr[i]\n      break\n    }\n  }\n  return found\n}\n\nexports.findLastIndex = function (arr, fn) {\n  var found = -1\n  for (var i = arr.length - 1; i >= 0; i--) {\n    if (fn(arr[i])) {\n      found = i\n      break\n    }\n  }\n  return found\n}\n\nexports.includes = function (arr, item) {\n  var found = false\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] === item) {\n      found = true\n      break\n    }\n  }\n  return found\n}\n\nexports.isNaN = function (n) {\n  return Number.isNaN(n)\n}\n\nexports.keys = function (obj) {\n  return Object.keys(obj)\n}\n\nexports.pullAt = function (arr, i) {\n  var res = arr.splice(i, 1)\n  return res\n}\n\nexports.unique = function (arr, i) {\n  return arr.filter(function (elem, pos) {\n    return arr.indexOf(elem) == pos\n  })\n}\n\n\n//# sourceURL=webpack:///./node_modules/date.js/lib/subdash.js?");

/***/ }),

/***/ "./node_modules/date.js/lib/symbol.js":
/*!********************************************!*\
  !*** ./node_modules/date.js/lib/symbol.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Module to enumerate all CFG symbols for the human language for time\n\n/**\n * Module Dependencies\n */\n\nvar maps = __webpack_require__(/*! ./maps.json */ \"./node_modules/date.js/lib/maps.json\")\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/date.js/lib/util.js\")\n\n/**\n * Constructors for all types of symbols\n */\nvar symbolConstructors = {\n  op: op,\n  c: c,\n  r: r,\n  n: n,\n  t: T,\n  dt: T,\n  T: T,\n  f: f,\n  o: o,\n  rT: rT,\n  cT: cT,\n}\n\n/**\n * Export `symbol`\n */\n\nmodule.exports = symbol\n\n/**\n * The symbol constructor, given a string, lemmatize it, then return a symbol from {∅=null,op,c,r,n,t,dt,T,f}.\n * i.e. str -> parseFloat(str) -> new n(str) -> return\n * or str -> lemma(str) -> new <symbol-name>(symbol-value) -> return\n * @param {string}  str       the input string\n * @return {*} The object from the class of symbols\n * @example\n * symbol('90')\n * // => n { value: 10 }\n * symbol('hour')\n * // a <dt> time difference object\n * // => dt { h: '1' }\n * symbol('tonight')\n * // or equivalently, takes the T string too\n * symbol('t:=9h,dt:12h')\n * // a T object containing <t>, <dt>\n * // => T { t: t { h: '=9' }, dt: dt { h: '12' } }\n * symbol('unrecognized')\n * // an unrecognized string yields the null symbol ∅\n * // => null\n */\nfunction symbol (str) {\n  var s\n  if (str == null) {\n    // null gets null\n    s = null\n  } else if (str['start'] && str['end']) {\n    // range: with 'start' and 'end'\n    s = new symbolConstructors['rT'](str)\n  } else if (parseFloat(str) == str) {\n    // 'n'\n    s = new symbolConstructors['n'](str)\n  } else if (str.match(util.reT)) {\n    // if is of the T string format t:<val>,dt:<val>\n    s = str.match(/\\s+/g) ? null : new symbolConstructors['T'](str)\n  } else {\n    var lem = util.lemma(str)\n    s = lem.name ? new symbolConstructors[lem.name](lem.value, lem.name) : null\n    // set the canonical word from lemma\n    if (s) { s.canon = lem.canon }\n  // set the original token for reference\n  }\n  if (s) { s.token = str }\n  return s\n}\n\n// console.log(symbol('10'))\n// console.log(symbol('hour'))\n// console.log(symbol('tonight'))\n// console.log(symbol('t:=9h,dt:12h'))\n// console.log(symbol('unrecognized'))\n\n// ///////////////////\n// the CFG symbols //\n// ///////////////////\n\n/**\n * The op for arithmetic operator.\n * note that since scaling(*,/) is very rare, we omit its implementation for now.\n */\nfunction op (value) {\n  this.value = value\n}\n\n/**\n * The origin operator.\n */\nfunction o (value) {\n  this.value = value\n}\n\n/**\n * The range operator.\n */\nfunction r (value) {\n  this.value = value\n}\n\n/**\n * The cron operator.\n */\nfunction c (value) {\n  this.value = value\n}\n\n/**\n * The n number. Calls parseFloat.\n */\nfunction n (value) {\n  this.value = parseFloat(value)\n}\n\n/**\n * The t for time t, i.e. a point in the timeline\n * units: ms, s, m, h, d, w, M, y\n * All values are string, to represent the \"=\" default in the units. so when performing numerical operation, use parseFloat.\n * @example\n * new t(undefined)\n * new t(\"\")\n * // => t {}\n * new t(\"7h30m\")\n * // => t { h: '7', m: '30' }\n * new t(\"7h=30m\")\n * // => t { h: '7', m: '=30' }\n */\nfunction t (value) {\n  // guard against falsy input\n  if (!value) {\n    return null\n  }\n  // 1. see if unit is prepended with \"=\" for default, or set to ''\n  // 2. then consume chunks of <number><timeUnit> like \"30m\"\n  while (value) {\n    var isDefault = (value.match(/^=/) || [])[0] || ''\n    value = value.replace(/^=/, '')\n    // default number is \"1\"\n    var number = (value.match(/^\\-?\\d+(\\.\\d+)?/) || [])[0] || '1'\n    value = value.replace(/^\\-?\\d+(\\.\\d+)?/, '')\n    var unit = (value.match(/^[a-zA-Z]+/) || [])[0]\n    value = value.replace(/^[a-zA-Z]+/, '')\n    // prepend the number (string) with isDefault, i.e. \"=\" or \"\"\n    this[unit] = isDefault + number\n  }\n}\n\n/**\n * The dt for time t, i.e. a displacement in the timeline\n * units: ms, s, m, h, d, w, M, y\n * All values are string, to represent the \"=\" default in the units. so when performing numerical operation, use parseFloat.\n * Same keys as <t> to allow for component-wise operation, e.g. t + dt = { ms+(d)ms, s+(d)s, ... }\n */\nfunction dt (value) {\n  // guard against falsy input\n  if (!value) {\n    return null\n  }\n  // 1. see if unit is prepended with \"=\" for default, or set to ''\n  // 2. then consume chunks of <number><timeUnit> like \"30m\"\n  while (value) {\n    var isDefault = (value.match(/^=/) || [])[0] || ''\n    value = value.replace(/^=/, '')\n    // default number is \"1\"\n    var number = (value.match(/^\\-?\\d+(\\.\\d+)?/) || [])[0] || '1'\n    value = value.replace(/^\\-?\\d+(\\.\\d+)?/, '')\n    var unit = (value.match(/^[a-zA-Z]+/) || [])[0]\n    value = value.replace(/^[a-zA-Z]+/, '')\n    // prepend the number (string) with isDefault, i.e. \"=\" or \"\"\n    this[unit] = isDefault + number\n  }\n}\n\n// console.log(new t(undefined))\n// console.log(new t(\"\"))\n// console.log(new t(\"7h30m\"))\n// console.log(new t(\"=7h30m\"))\n// console.log(new t().constructor.name)\n\n/**\n * The T, implementation-specific, is a linear combination of <t> and <dt>.\n * Used to capture the human Ts, e.g. noon, afternoon, dawn, evening, today, tonight, Sunday, fortnight, weekdays, weekends, christmas, spring, summer, holidays etc.\n * To specify T in maps.json, follow the syntax:\n * `:` means \"set\", `=` means \"default\", use t:<value>,dt:<value> for the symbol-value, e.g. \"t:=7h,dt:0h\"\n * evening ~ t:=7h,dt:12h, read as \"t set to default 7h, dt set to 12h\"\n * later ~ t:,dt:=3h, read as \"t set to nothing, dt set to default 3h\"\n * beware, \"\" and \"0\" are diferent, the former is empty, the later a numerical value.\n * @param  {string} value from the Symbol.\n * @param  {string} [name] from the Symbol.\n * @example\n * var T = new symbol(\"t:=7h,dt:0h\")\n * // => T { t: t { h: '=7' }, dt: dt { h: '0' } }\n * T.t\n * // => t { h: '=7' }\n * T.dt\n * // => t { h: '0' }\n */\nfunction T (value, name) {\n  if (name == 't') {\n    this.t = new t(value)\n    this.dt = new dt()\n  } else if (name == 'dt') {\n    this.t = new t()\n    this.dt = new dt(value)\n  } else {\n    var split = value.split(','),\n      _t = split[0].split(':').pop(),\n      _dt = split[1].split(':').pop()\n    this.t = new t(_t)\n    this.dt = new dt(_dt)\n  }\n}\n\n// var T = new T(\"t:=7h,dt:0h\")\n// console.log(T.t)\n// console.log(T.dt)\n\n/**\n * The product of <r><T>, gives a time interval\n */\nfunction rT (interval) {\n  this.start = interval.start\n  this.end = interval.end\n}\n\n/**\n * The f to capture frequency for <c>.\n */\nfunction f (value) {\n  this.value = value\n}\n\n/**\n * The product of <c><T> or <c><rT>, gives a cron time\n */\nfunction cT (cron) {\n  this.cron = cron\n}\n\n\n//# sourceURL=webpack:///./node_modules/date.js/lib/symbol.js?");

/***/ }),

/***/ "./node_modules/date.js/lib/tokenize.js":
/*!**********************************************!*\
  !*** ./node_modules/date.js/lib/tokenize.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Module to tokenize a string into CFG symbols\n\n/**\n * Module Dependencies\n */\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/date.js/lib/util.js\")\nvar symbol = __webpack_require__(/*! ./symbol */ \"./node_modules/date.js/lib/symbol.js\")\nvar maps = __webpack_require__(/*! ./maps.json */ \"./node_modules/date.js/lib/maps.json\")\n\n/**\n * regexes for Subnormal forms\n */\n\nvar re = {\n  // 12/20 - 12/21, 2012/12 - 2013/12\n  MMsDDdMMsDD: /(?!\\d{1,4}\\/\\d{1,4}\\s*-\\s*\\d{1,4}\\/\\d{1,4}\\/)(\\d{1,4})\\/(\\d{1,4})\\s*-\\s*(\\d{1,4})\\/(\\d{1,4})/g,\n  // 12/22 - 23, 2012/10 - 12\n  MMsDDdDD: /(?!\\d{1,4}\\/\\d{1,4}\\s*-\\s*\\d{1,4}\\/)(\\d{1,4})\\/(\\d{1,4})\\s*-\\s*(\\d{1,4})/g,\n  // 12/24, 2012/12\n  MMsDD: /(?!\\d{1,4}\\/\\d{1,4}\\/)(\\d{1,4})\\/(\\d{1,4})/g,\n  // 05:30pm, 0530pm, 1730, 1730pm, 1730[re:h], remove the [re:h]\n  hhcmm: /(\\s+\\d{1,2}|^\\d{1,2})\\:?(\\d{2})\\s*(\\S+)*/g\n}\n\n/**\n * Export `tokenize`\n */\n\nmodule.exports = tokenize\n\n/**\n * Parse and tokenize a string into array of valid CFG symbols, in these steps:\n * 1. parse normal forms\n * 2. parse subnormal forms\n * 3. parse english forms\n * @param  {string} str The input string.\n * @return {JSON}     {str, tokensIn, tokensOut, symbols}\n */\nfunction tokenize (str) {\n  // split num from alphabets\n  str = (' ' + str)\n    .replace(/\\s+(\\d+)([a-zA-Z]+)/g, ' $1 $2')\n    .replace(/\\s+([a-zA-Z]+)(\\d+)/g, ' $1 $2')\n    .replace(/\\s+/g, ' ')\n    .replace(/^\\s+/, '')\n  // 1. 2. parse normal and subnormal forms\n  var p = parseNormal12(str),\n    pStr = p.str,\n    tokens = pStr.split(' '),\n    symbols = []\n  // clean the non-normal tokens a bit, allow to be wrapped by words only\n  for (var i = 0; i < tokens.length; i++) {\n    if (!tokens[i].match(util.reT)) {\n      tokens[i] = tokens[i].replace(/^\\W+/, '').replace(/\\W+$/, '')\n    }\n  }\n\n  // 3. parse english forms\n  for (var i = 0; i < tokens.length; i++) {\n    var tok = tokens[i]\n    var oneGram = tok,\n      twoGram = tok + ' ' + (tokens[i + 1] || ''),\n      oneSym = symbol(oneGram),\n      twoSym = symbol(twoGram)\n    if (twoSym && twoSym.value == oneSym.value) {\n      // if lemmatization must happen for both,\n      // pick the longer, skip next token\n      // skip this once, reset skip\n      i++\n      symbols.push(symbol(twoGram))\n    } else {\n      symbols.push(symbol(oneGram))\n    }\n  }\n  return {\n    str: pStr,\n    tokensOut: p.tokensOut,\n    tokensIn: p.tokensIn,\n    symbols: symbols\n  }\n}\n\n/**\n * Run 1. parseNormal then 2. parseNormal2, return the parsed string with T-format tokens.\n * @private\n * @param  {string} str The input string\n * @return {JSON}     Parsed string\n */\nfunction parseNormal12 (str) {\n  var p1 = parseNormal1(str)\n  // find tokens that are purely normal, and reinject into string\n  var p1TokensOut = p1.tokensOut.filter(notSubnormal)\n  var p1Str = injectNormal(str, p1TokensOut)\n  // now parse the subnormal\n  var p2 = parseNormal2(p1Str, [], [])\n  // the tokens that taken out, and their replacements, in order\n  var pTokensOut = p1.tokensOut.concat(p2.tokensOut)\n  var pTokensIn = p1.tokensIn.concat(p2.tokensIn)\n  return {\n    str: p2.str,\n    tokensOut: pTokensOut,\n    tokensIn: pTokensIn\n  }\n}\n\n/**\n * 1. Parse normal forms. Try to parse and return a normal Date, parseable from new Date(str), by continuously trimming off its tail and retry until either get a valid date, or string runs out.\n * Doesn't parse string with length <5\n * @private\n * @param  {string} str The input string.\n * @return {string}     A Date in stdT string, or null.\n */\nfunction parseNormal1 (str) {\n  // keep chopping off tail until either get a valid date, or string runs out\n  // array of parsed date and the string consumed\n  var tokensIn = [],\n    tokensOut = []\n  // ensure single spacing\n  str = str.replace(/\\s+/g, ' ')\n  // tokenize by space\n  var strArr = str.split(/\\s+/g)\n\n  // init the normalDate and head string used\n  var normalDate = null,\n    head = ''\n  // do while there's still string to go\n  while (strArr.length) {\n    head = (head + ' ' + strArr.shift()).trim()\n    try {\n      normalDate = util.stdT(new Date(head))\n      // Extend head: if parse successful, extend continuously until failure, then that's the longest parseable head string, ...<date>\n      var advanceHead = head + ' ' + strArr[0]\n      while (1) {\n        try {\n          var advanceDate = util.stdT(new Date(advanceHead))\n          if (advanceDate != 'Invalid Date') {\n            // if advanceDate is parseable, set to current, update heads\n            var normalDate = advanceDate\n            head = head + ' ' + strArr.shift()\n            advanceHead = advanceHead + ' ' + strArr[0]\n          } else {\n            break\n          }\n        } catch (e) {\n          // when fail, just break\n          break\n        }\n      }\n      // Shrink head: from the whole parseable head ...<date>, trim front till we get <date>\n      while (1) {\n        try {\n          if (util.stdT(new Date(head.replace(/^\\s*\\S+\\s*/, ''))) != normalDate) {\n            // front token eaten causes change, dont update head\n            break\n          } else {\n            // update head\n            head = head.replace(/^\\s*\\S+\\s*/, '')\n          }\n        } catch (e) {\n          break\n        }\n      }\n      // only consider a valid parse if the parsed str is long enough\n      if (head.length > 6) {\n        tokensIn.push(normalDate)\n        // get head = <date> only, then reset\n        tokensOut.push(head)\n      }\n      head = ''\n    } catch (e) {}\n  }\n  return { tokensIn: tokensIn, tokensOut: tokensOut }\n}\n\n/**\n * 2. Parse subnormal forms after parseNormal. Gradually replace tokens of the input string while parseable.\n * @private\n */\nfunction parseNormal2 (str, tokensIn, tokensOut) {\n  var m, res\n  if (m = re.MMsDDdMMsDD.exec(str)) {\n    // 12/20 - 12/21\n    var yMd1 = yMdParse(m[1], m[2])\n    var yMd2 = yMdParse(m[3], m[4])\n    res = ' t:' + yMd1 + ',dt: - t:' + yMd2 + ',dt: '\n  } else if (m = re.MMsDDdDD.exec(str)) {\n    // 12/22 - 23\n    var yMd1 = yMdParse(m[1], m[2])\n    var yMd2 = yMdParse(m[1], m[3])\n    res = ' t:' + yMd1 + ',dt: - t:' + yMd2 + ',dt: '\n  } else if (m = re.MMsDD.exec(str)) {\n    // if year\n    var yMd = yMdParse(m[1], m[2])\n    // 12/24\n    res = ' t:' + yMd + ',dt: '\n  } else if (m = re.hhcmm.exec(str)) {\n    // 05:30pm, 0530pm, 1730, 1730pm, 1730[re:h], remove the [re:h]\n    res = ' t:' + m[1].trim() + 'h' + m[2] + 'm' + ',dt: ' + (m[3] || '')\n  } else {\n    // exit recursion if hits here\n    return {\n      str: str,\n      tokensIn: tokensIn,\n      tokensOut: tokensOut\n    }\n  }\n  // recurse down till no more substitution (CFG is not cyclic, so ok)\n  tokensOut.push(m[0])\n  tokensIn.push(res)\n  str = parseNormal2(str.replace(m[0], res), tokensIn, tokensOut).str\n  return {\n    str: str,\n    tokensIn: tokensIn,\n    tokensOut: tokensOut\n  }\n}\n\n// ////////////////////\n// Helper functions //\n// ////////////////////\n\n/**\n * Try to parse two tokens for T form into MM/dd, or MM/yyyy if either token hsa length 4.\n * @private\n * @param  {string} token1\n * @param  {string} token2\n * @return {string}        in the form <y><M><d>\n */\nfunction yMdParse (token1, token2) {\n  var part0 = [token1, token2].filter(function (token) {\n    return token.length == 4\n  })\n  var part1 = [token1, token2].filter(function (token) {\n    return token.length != 4\n  })\n  var y = part0[0] ? part0[0] + 'y' : ''\n  var M = part1[0] + 'M'\n  var d = part1[1] ? part1[1] + 'd' : ''\n  return y + M + d\n}\n\n/**\n * Check if the dateStr is strictly normal and not subnormal. Used to extract parseNormal2 overrides.\n * @private\n * @param  {string} dateStr\n * @return {Boolean}\n */\nfunction notSubnormal (dateStr) {\n  var subnormalStr = parseNormal2(dateStr, [], []).str\n  // remove T and see if still has words\n  var noT = subnormalStr.replace(/t\\:\\S*,dt\\:\\S*(\\s*-\\s*t\\:\\S*,dt\\:\\S*)?/, '')\n  return /\\w+/g.exec(noT) != null\n}\n\n/**\n * Given a string and array of its parsed phrases, convert them into T stdT then T format, and inject into the original string, return.\n * @private\n * @param  {string} str       The original string.\n * @param  {Array} parsedArr The parsed phrases from the string.\n * @return {string}           The string with parsed phrases replaced in T format.\n *\n * @example\n * injectNormal('05 October 2011 14:48 UTC 08/11 2020', [ '05 October 2011 14:48 UTC', '08/11 2020' ])\n * // => 't:2011y10M05d14h48m00.000s,dt: t:2020y08M11d04h00m00.000s,dt: '\n */\nfunction injectNormal (str, parsedArr) {\n  for (var i = 0; i < parsedArr.length; i++) {\n    var parsed = parsedArr[i]\n    var T = util.stdTtoT(util.stdT(new Date(parsed)))\n    str = str.replace(parsed, T)\n  }\n  return str\n}\n\n\n//# sourceURL=webpack:///./node_modules/date.js/lib/tokenize.js?");

/***/ }),

/***/ "./node_modules/date.js/lib/util.js":
/*!******************************************!*\
  !*** ./node_modules/date.js/lib/util.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Module Dependencies\n */\n\nvar _ = __webpack_require__(/*! ./subdash */ \"./node_modules/date.js/lib/subdash.js\")\nvar maps = __webpack_require__(/*! ./maps.json */ \"./node_modules/date.js/lib/maps.json\")\n\n/**\n * The T string regex, e.g. \"t:=9h,dt:12h\", to encode T = <t> <dt>. Is case sensitive.\n */\n\nvar reT = /t\\:\\S*,dt\\:\\S*/g\n\n/**\n * The ordering of time units, large to small,\n * 'mer' is the meridiem, 0 for am, 1 for pm\n * and the units used for carrying\n */\n\nvar timeUnitOrder = ['y', 'M', 'w', 'd', 'h', 'm', 's', 'ms']\nvar canonTimeUnitOrder = []\nfor (var i = 0; i < timeUnitOrder.length; i++) {\n  var unit = timeUnitOrder[i]\n  canonTimeUnitOrder.push(lemma(unit).canon)\n}\nvar tOrdering = ['y', 'M', 'd', 'h', 'm', 's']\nvar tFactor = [365, 30, 24, 60, 60]\n\n/**\n * Delimiters for stdT string\n */\n\nvar stdTdelim = ['-', '-', ' ', ':', ':', '']\n\n/**\n * Export `util`\n */\n\nmodule.exports = {\n  TtoStdT: TtoStdT,\n  TtoStr: TtoStr,\n  delimSyms: delimSyms,\n  hasSym: hasSym,\n  has_dt: has_dt,\n  has_pureTimeUnit: has_pureTimeUnit,\n  has_t: has_t,\n  highestOverride: highestOverride,\n  isSym: isSym,\n  largestUnit: largestUnit,\n  lemma: lemma,\n  nextLargestUnit: nextLargestUnit,\n  nowT: nowT,\n  opType: opType,\n  orderChunks: orderChunks,\n  removeTnPlus: removeTnPlus,\n  reT: reT,\n  sName: sName,\n  splitByArr: splitByArr,\n  splitSyms: splitSyms,\n  splitT: splitT,\n  stdT: stdT,\n  stdTdelim: stdTdelim,\n  stdTtoT: stdTtoT,\n  tOrdering: tOrdering,\n  timeUnitOrder: timeUnitOrder,\n  canonTimeUnitOrder: canonTimeUnitOrder,\n  tokenToStr: tokenToStr,\n  unparsedStr: unparsedStr,\n}\n\n/**\n * Convert a T string to stdT string, with default filled by nowT().\n * @example\n * TtoStdT('t:10M05d14h48m00.000s,dt:')\n * // => 2016-10-05 14:48:00\n */\nfunction TtoStdT (str, offset) {\n  if (typeof str != 'string') {\n    str = TtoStr(str)\n  }\n  var nowStr = nowT(offset),\n    nowArr = splitT(nowStr),\n    strArr = splitT(str)\n  var resArr = []\n  for (var i = 0; i < nowArr.length; i++) {\n    var val = parseFloat(strArr[i])\n    if (Number.isNaN(val)) { val = parseFloat(nowArr[i]) }\n    resArr.push(val)\n  }\n  var resStr = ''\n  for (var i = 0; i < stdTdelim.length; i++) {\n    var num = resArr[i].toString()\n    // e.g. '5.123' tends to be '05.123', fix it\n    var predecimal = /(\\d+)(\\.\\d+)?/.exec(num)[1],\n      postdecimal = /(\\d+)\\.?(\\d+)?/.exec(num)[2]\n    if (predecimal.length == 1) { num = '0' + num }\n    if (postdecimal != null) {\n      for (var j = 0; j < 3 - postdecimal.length; j++) {\n        num = num + '0'\n      }\n    }\n    resStr += (num + stdTdelim[i])\n  }\n  // console.log('resStr', resStr)\n  return resStr\n}\n// console.log(TtoStdT('t:10M05d14h48m00.010s,dt:'))\n\n/**\n * Convert a T symbol into its T string.\n */\nfunction TtoStr (T) {\n  var tStr = 't:',\n    dtStr = ',dt:'\n  for (var i = 0; i < timeUnitOrder.length; i++) {\n    var tUnit = timeUnitOrder[i]\n    // if unit exist, write to str\n    if (T['t'][tUnit] != undefined) {\n      tStr += T['t'][tUnit] + tUnit\n    }\n    if (T['dt'][tUnit] != undefined) {\n      dtStr += T['dt'][tUnit] + tUnit\n    }\n  }\n  return tStr + dtStr\n}\n\n/**\n * Delimit the array of timeChunk symbols by combining consecutive nulls (>3) into one, and dumping those shorter. Result is then delimited by 'trinull'.\n * @param  {Array} syms Of parsed symbols aka time chunks.\n * @return {Array}      symbols delimited by 'trinull'\n */\nfunction delimSyms (syms) {\n  // 1.\n  // contract the nulls into trinulls in a single array\n  var newSyms = [],\n    count = 0\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i]\n    if (s == null) {\n      count++\n    } else {\n      if (count > 2) {\n        newSyms.push('trinull')\n      }\n      newSyms.push(s)\n      count = 0\n    }\n  }\n  return newSyms\n}\n// console.log(delimSyms([1, 2, null, null, null, 3]))\n\n/**\n * Check if arr has symbol whose name is listen in symArr.\n * @param  {Array}  arr    Array of symbols.\n * @param  {Array}  symArr Array of symbol names.\n * @return {Boolean}\n */\nfunction hasSym (syms, symArr) {\n  var found = false\n  for (var i = 0; i < syms.length; i++) {\n    if (isSym(syms[i], symArr)) {\n      found = true\n      break\n    }\n  }\n  return found\n}\n\n/**\n * Check if T.dt is not empty\n */\nfunction has_dt (T) {\n  return _.keys(T.dt).length > 0\n}\n\n/**\n * Check if T has only t, dt with units from timeUnitOrder\n */\nfunction has_pureTimeUnit (T) {\n  var dt = T.dt,\n    t = T.t\n  var pure = true\n  for (var k in dt) {\n    if (!_.includes(timeUnitOrder, k)) {\n      pure = false\n      break\n    }\n  }\n  for (var k in t) {\n    if (!_.includes(timeUnitOrder, k)) {\n      pure = false\n      break\n    }\n  }\n  return pure\n}\n\n/**\n * Check if T.t is not empty\n */\nfunction has_t (T) {\n  return _.keys(T.t).length > 0\n}\n\n/**\n * find the lowest overridable unit in t or dt\n */\nfunction highestOverride (t) {\n  var lowestOverable = null\n  for (var i = 0; i < tOrdering.length; i++) {\n    var unit = tOrdering[i]\n    if (/^=/.exec(t[unit])) {\n      lowestOverable = unit\n      break\n    }\n  }\n  return lowestOverable\n}\n\n/**\n * Check if arr has the symbol name of s.\n * @param  {symbol}  s   symbol object\n * @param  {Array}  arr Of string symbol names\n * @return {Boolean}\n */\nfunction isSym (s, arr) {\n  return _.includes(arr, sName(s))\n}\n\n/**\n * Find the largest enumerated unit in T.t, or if none, in T.dt\n */\nfunction largestUnit (T) {\n  var lu = _.find(tOrdering, function (unit) {\n    return T.t[unit]\n  })\n  if (lu == null) {\n    lu = _.find(tOrdering, function (unit) {\n      return T.dt[unit]\n    })\n  }\n  return lu\n}\n\n/**\n * Return the lemma symbol of a word string, i.e. the name and value of the symbol it belongs to in the CFG. Uses ./maps.json.\n * NLP Lemmatization refers here: htp://nlp.stanford.edu/Ir-book/html/htmledition/stemming-and-lemmatization-1.html. Inflections = all possible alternative words of a lemma.\n * @param  {string} str To lemmatize.\n * @return {JSON}     Lemma symbol {name, value} for CFG\n * @example\n * lemma('zero')\n * // => { value: '0', name: 'n' }\n */\nfunction lemma (str) {\n  // change all to lower case except for 'M' for month\n  str = (str == 'M') ? str : str.toLowerCase()\n  var lem = {},\n    name = null,\n    value = null,\n    canon = str\n  var mapsKeys = _.keys(maps)\n  for (var i = 0; i < mapsKeys.length; i++) {\n    var sMap = maps[mapsKeys[i]],\n      sMapKeys = _.keys(sMap)\n    for (var j = 0; j < sMapKeys.length; j++) {\n      var inflectionArr = sMap[sMapKeys[j]]\n      if (_.includes(inflectionArr, str)) {\n        // set the canonical form as the first in inflectionArr\n        canon = inflectionArr[0]\n        // if str is in inflections\n        value = sMapKeys[j]\n        break\n      }\n    }\n    if (value != null) {\n      name = mapsKeys[i]\n      break\n    }\n  }\n  // set value\n  lem['name'] = name\n  lem['value'] = value\n  lem['canon'] = canon\n  return lem\n}\n// console.log(lemma('zero'))\n\n/**\n * Find the next largest enumerated unit in T.t, or if none, in T.dt\n */\nfunction nextLargestUnit (T) {\n  var lu = largestUnit(T)\n  return tOrdering[tOrdering.indexOf(lu) - 1]\n}\n\n/**\n * Convenient method to get current time in T format.\n * @return {string} T format string.\n */\nfunction nowT (offset) {\n  var dateStr = (offset == undefined) ? stdT(new Date()) : stdT(offset)\n  return stdTtoT(dateStr)\n}\n\n/**\n * Determine the op type based on arguments\n */\nfunction opType (L, op, R) {\n  var LsName = sName(L) || '',\n    RsName = sName(R) || ''\n  var opsName = sName(op)\n  if (opsName != 'o' && opsName != 'r' && opsName != 'c') { opsName = '' }\n  return LsName + opsName + RsName\n}\n\n/**\n * Order time chunks by not containing T, short to long, then containing T, short to long. Used for .pop() to get the candidate timechunk for parsing.\n */\nfunction orderChunks (matrix) {\n  // 2.\n  // ok partition first then sort\n  var hasNoT = matrix.filter(function (row) {\n    return !hasSym(row, ['T'])\n  })\n  var hasT = matrix.filter(function (row) {\n    return hasSym(row, ['T'])\n  })\n  // matrix, sorted short to long\n  var lengthSortedNotTMat = hasNoT.sort(function (a, b) {\n    return a.length - b.length\n  })\n  var lengthSortedTMat = hasT.sort(function (a, b) {\n    return a.length - b.length\n  })\n  // 3.1 3.2 3.3\n  return lengthSortedNotTMat.concat(lengthSortedTMat)\n}\n\n/**\n * !remove the defaul <o|op> that is 'plus' between <T>, <n> for defaulting to plus.\n * !is a quickfix for mat\n */\nfunction removeTnPlus (syms) {\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i]\n    if (isSym(s, ['op']) && s.value == 'plus' && isSym(syms[i + 1], ['n'])) {\n      syms.splice(i, 1)\n    }\n  }\n  return syms\n}\n\n/**\n * Return the name of a symbol: {op,c,r,n,T,f}\n * @param  {Symbol} symbol A CFG symbol.\n * @return {string}        name of the symbol.\n */\nfunction sName (symbol) {\n  return symbol ? symbol.constructor.name : null\n}\n\n/**\n * Split a string by an array of tokens.\n * @param  {string} str       The input string.\n * @param  {Array} tokenArr Array of tokens to split the string by.\n * @return {Array}           The split string array.\n */\nfunction splitByArr (str, tokenArr) {\n  var delim = '#{REPLACE}'\n  // inject into tokens\n  for (var i = 0; i < tokenArr.length; i++) {\n    var token = tokenArr[i]\n    str = str.replace(token, delim)\n  }\n  // split into arr\n  return str.split(delim)\n}\n// console.log(splitByArr('lorem 1 ipsum 2 dolor 3', [1,2,3]))\n\n/**\n * Split an array of symbols by delimiter into matrix.\n * @param  {Array} syms      The input array\n * @param  {string|symbol} delimiter To split the array by\n * @return {matrix}           delimited arrays.\n */\nfunction splitSyms (syms, delimiter) {\n  // split the single array into matrix\n  var matrix = [],\n    newRow = []\n  for (var i = 0; i < syms.length; i++) {\n    var s = syms[i]\n    if (s == delimiter || sName(s) == delimiter) {\n      // delimit and push to matrix\n      matrix.push(newRow)\n      newRow = []\n    } else if (i == syms.length - 1) {\n      // edge case, push res\n      newRow.push(s)\n      matrix.push(newRow)\n    } else {\n      // accumulate in row\n      newRow.push(s)\n    }\n  }\n  return matrix\n}\n\n/**\n * Split a T string into array of [_y, _M, _d, _h, _m, _s]\n */\nfunction splitT (str) {\n  if (!str.match(reT)) {\n    return null\n  }\n  var _y = (/(\\d+(\\.\\d+)?)y/.exec(str) || [])[1],\n    _M = (/(\\d+(\\.\\d+)?)M/.exec(str) || [])[1],\n    _w = (/(\\d+(\\.\\d+)?)w/.exec(str) || [])[1],\n    _d = (/(\\d+(\\.\\d+)?)d/.exec(str) || [])[1],\n    _h = (/(\\d+(\\.\\d+)?)h/.exec(str) || [])[1],\n    _m = (/(\\d+(\\.\\d+)?)m/.exec(str) || [])[1],\n    _s = (/(\\d+(\\.\\d+)?)s/.exec(str) || [])[1]\n\n  // The Time Object\n  var TO = {\n    y: _y,\n    M: _M,\n    w: _w,\n    d: _d,\n    h: _h,\n    m: _m,\n    s: _s\n  }\n  // do the carries\n  TO = carry(TO)\n\n  // compose results\n  var res = []\n  for (var i = 0; i < tOrdering.length; i++) {\n    var k = tOrdering[i]\n    res.push(TO[k])\n  }\n  return res\n}\n\n/**\n * Function to properly down- and up- carry Time Object\n * 1. dumpweek, 2. carryDown, 3. carryUp\n */\nfunction carry (TO) {\n  TO = dumpWeek(TO)\n  TO = carryDown(TO)\n  TO = carryUp(TO)\n  return TO\n}\n\n/**\n * 1. dumpWeek\n */\nfunction dumpWeek (TO) {\n  var _w = parseFloat(TO['w'] || '0'),\n    _d = parseFloat(TO['d'] || '0')\n  TO['d'] = _d + (_w * 7)\n  delete TO['w']\n  return TO\n}\n\n/**\n * 2. carryDown\n */\nfunction carryDown (TO) {\n  // shall reverse the ordering and factors for opp direction\n  var ordering = tOrdering,\n    factor = tFactor\n  var carry = 0\n  for (var i = 0; i < ordering.length; i++) {\n    // the time unit in the ordering\n    var u = ordering[i]\n    // skip the rest of loopbody if this unit is undefined and nothing to carry\n    if (TO[u] == undefined && carry == 0) {\n      continue\n    }\n    // carry\n    TO[u] = parseFloat(TO[u] || '0') + carry\n    // dont go in after the last one\n    if (i == ordering.length - 1) {\n      // overlong s decimal will be fixed in TtoStdT\n      break\n    }\n    var decimal = parseFloat(TO[u] || '0') - parseInt(TO[u] || '0')\n    if (decimal > 0) {\n      // set next carry\n      carry = decimal * factor[i]\n      // update current u\n      TO[u] = parseInt(TO[u])\n    } else {\n      // else reset to 0 if no carry\n      carry = 0\n    }\n  }\n  return TO\n}\n\n/**\n * 3. carryUp\n */\nfunction carryUp (TO) {\n  // shall reverse the ordering and factors for opp direction\n  var ordering = tOrdering.slice().reverse(),\n    factor = tFactor.slice().reverse()\n  var carry = 0\n  for (var i = 0; i < ordering.length; i++) {\n    // the time unit in the ordering\n    var u = ordering[i]\n    // skip the rest of loopbody if this unit is undefined and nothing to carry\n    if (TO[u] == undefined && carry == 0) {\n      continue\n    }\n    // carry\n    TO[u] = parseFloat(TO[u] || '0') + carry\n    // dont go in after the last one\n    if (i == ordering.length - 1) {\n      break\n    }\n    var deci = parseInt(parseFloat(TO[u] || '0') / factor[i])\n    if (deci > 0) {\n      // set next carry\n      carry = deci\n      // update current u\n      TO[u] = parseFloat(TO[u] || '0') % factor[i]\n    } else {\n      // else reset to 0 if no carry\n      carry = 0\n    }\n  }\n  return TO\n}\n\n/**\n * Take a date or string, parse it into standard format as yyyy-MM-dd hh:mm:ss.sss\n */\nfunction stdT (date) {\n  if (typeof date == 'string') {\n    date = new Date(date)\n  }\n  var _y = date.getFullYear(),\n    _M = date.getMonth() + 1,\n    _d = date.getDate(),\n    _date = [_y, _M, _d].join('-')\n  _time = /(\\d\\S+)/.exec(date.toTimeString())[1],\n  format = _date + ' ' + _time\n  return format\n}\n\n/**\n * Convert std time string to T string.\n * @example\n * stdTtoT('2011-10-05T14:48:00.000')\n * // => 't:2011y10M05d14h48m00.000s,dt:'\n */\nfunction stdTtoT (str) {\n  var datetime = str.split(' ')\n  var date = datetime[0].split('-'),\n    time = datetime[1].split(':')\n  return 't:' + date[0] + 'y' + date[1] + 'M' + date[2] + 'd' + time[0] + 'h' + time[1] + 'm' + time[2] + 's,dt:'\n}\n// console.log(stdTtoT('2011-10-05T14:48:00.000Z'))\n\n/**\n * Recombine array of symbols back into str\n */\nfunction tokenToStr (syms) {\n  var tokens = []\n  for (var i = 0; i < syms.length; i++) {\n    tokens.push(syms[i].token)\n  }\n  return tokens.join(' ')\n}\n\n/**\n * Extract unparsedTokens from str and parsed syms then join them\n */\nfunction unparsedStr (str, syms) {\n  var inputTokens = str.split(/\\s+/)\n  var tokens = []\n  for (var i = 0; i < syms.length; i++) {\n    if (syms[i] == null) {\n      tokens.push(inputTokens[i])\n    }\n  }\n  return tokens.join(' ')\n}\n\n\n//# sourceURL=webpack:///./node_modules/date.js/lib/util.js?");

/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(/*! ./debug */ \"./node_modules/debug/src/debug.js\");\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/debug/src/browser.js?");

/***/ }),

/***/ "./node_modules/debug/src/debug.js":
/*!*****************************************!*\
  !*** ./node_modules/debug/src/debug.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(/*! ms */ \"./node_modules/ms/index.js\");\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n//# sourceURL=webpack:///./node_modules/debug/src/debug.js?");

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n//# sourceURL=webpack:///./node_modules/ms/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/tinycolor2/tinycolor.js":
/*!**********************************************!*\
  !*** ./node_modules/tinycolor2/tinycolor.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif ( true && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {return tinycolor;}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n// Browser: Expose to window\nelse {}\n\n})(Math);\n\n\n//# sourceURL=webpack:///./node_modules/tinycolor2/tinycolor.js?");

/***/ })

/******/ });